[
    {
      "title": "Show HN: 3D printing giant things with a Python jigsaw generator",
      "url": "https://calbryant.uk/blog/3d-printing-giant-things-with-jigsaw-generator/",
      "text": "",
      "upvotes": 60,
      "comments": 8,
      "time_delta": 7,
      "rank": 1,
      "score": 0.022434057324085387
    },
    {
      "title": "Show HN: DeepSeek My User Agent",
      "url": "https://www.jasonthorsness.com/20",
      "text": "",
      "upvotes": 213,
      "comments": 90,
      "time_delta": "2025-01-26T22:03:39",
      "rank": 2,
      "score": 194.43020939837677
    },
    {
      "title": "Show HN: A new native app for 20 year old OS X",
      "url": "https://uppercut.chadbibler.com",
      "text": "A few of us here are probably familiar with the original Xbox modding scene and the iconic xbins FTP server. Recently, I came across an amazing tool called Pandora by Team Resurgent [0], which got me thinking about how incredible something like this would have been 20 years ago. Just to clarify, I had no involvement in creating Pandora—I’m just inspired by their work. For those who aren’t familiar, getting access to xbins involves a rather dated process. You need to connect to a channel on an EFnet IRC server, message a bot for temporary credentials, then plug those credentials into your FTP client to access xbins. Pandora (and my app) simplifies this entire workflow into a single click. Inspired by Pandora, I decided to build my own take on what this dream tool might have looked like back in the day. I wrote a native Mac app on original hardware—an Intel iMac (20-inch, 2007)—running a 20-year-old operating system, Mac OS X 10.4 Tiger. This was my first foray into native Mac app development, though I’ve done some iOS development in the past. The result is Uppercut [1], and the source is available on GitHub [2]. For the development process, I used Claude to help with a lot of the coding, especially since I was constrained to Xcode 2.5 and the pre-“Objective-C 2.0” features available at the time. I had to be very specific in prompting Claude to avoid newer features that didn’t exist back then. Since the majority of Objective-C code out there comes from the era of iOS development (which relied heavily on Objective-C 2.0 until the arrival of Swift), this was a unique and challenging exercise in retro development.",
      "upvotes": 83,
      "comments": 18,
      "time_delta": "2025-01-24T00:46:55",
      "rank": 3,
      "score": 0.04098851336888203
    },
    {
      "title": "Show HN: Orange intelligence, an open source alternative to Apple Intelligence",
      "url": "https://github.com/sharingan-no-kakashi/orange-intelligence",
      "text": "Hi HN! I’m excited to share Orange Intelligence, an open-source alternative to Apple Intelligence for macOS. Orange Intelligence allows you to interact with any text on your macOS system in a more powerful and customizable way. It brings a floating text processor that integrates seamlessly with your workflow. Whether you’re a developer, writer, or productivity enthusiast, this tool can boost your efficiency. Key Features: Floating Text Processor: Trigger a floating window by double-tapping the Option key to process selected text. Run Any Python Function: From basic text manipulations to running large language models (LLM) like OpenAI or local LLaMA, you can execute any Python function on the fly. Full Customization: Want to add your own functions or logic? Just write them in Python, and they’ll appear in the floating window. How does it work? Capture: Uses AppleScript to simulate a global Cmd+C and capture selected text from any active macOS app. Process: A floating window pops up, letting you choose what to do with the text (run a function, format it, or apply an LLM). Replace: After processing, the app returns focus to the original application and pastes the processed text back with a global Cmd+V. Why open source? I built this to overcome the limitations of Apple’s proprietary tools, and I wanted to make it fully customizable and extendable. Orange Intelligence is built with Python and PyQt6, so it’s easy to adapt, extend, and contribute to. It’s not just a text processor—it’s a platform for building custom workflows, whether you want to automate simple tasks or integrate with complex AI systems. If you’re on macOS and you’re interested in boosting your productivity with Python and AI, I’d love for you to try it out and give feedback: GitHub. I’m looking forward to your thoughts, ideas, and contributions. Thanks!",
      "upvotes": 56,
      "comments": 11,
      "time_delta": "2025-01-26T11:02:59",
      "rank": 4,
      "score": 0.8777053852698246
    },
    {
      "title": "Show HN: Guide Gecko – AI-Powered Codebase Understanding (macOS)",
      "url": "https://www.guidegecko.ai/",
      "text": "",
      "upvotes": 2,
      "comments": 1,
      "time_delta": "2025-01-27T01:15:27",
      "rank": 5,
      "score": 0.07407196115780572
    },
    {
      "title": "Show HN: SimpleSearch – Just a list of search bars",
      "url": "https://simplesearch.info/",
      "text": "I made this site for myself, SimpleSearch.info, as new default browser page. I’m not sure if it actually _saves_ time or clicks (though, for me, it saves at least one click per search), but I find the search experience more pleasant. On desktop, it’s nice to just have these search bars as the first thing that pops up in a new window or tab vs clicking bookmarks in the toolbar or elsewhere then searching. Similarly, on mobile, I like just clicking on one icon for all my searches. The vast majority of my web browsing begins with a search or LLM query. I’m curious if this is helpful to anyone else and if there are any additional features I might add to make it more useful. Thanks!",
      "upvotes": 23,
      "comments": 21,
      "time_delta": "2025-01-26T19:05:40",
      "rank": 6,
      "score": 6.817744856424373
    },
    {
      "title": "Show HN: I made an open-source laptop from scratch",
      "url": "https://www.byran.ee/posts/creation/",
      "text": "Hello! I'm Byran. I spent the past ~6 months engineering a laptop from scratch. It's fully open-source on GH at: https://github.com/Hello9999901/laptop",
      "upvotes": 3161,
      "comments": 321,
      "time_delta": "2025-01-22T20:41:52",
      "rank": 7,
      "score": 0.8492735444224468
    },
    {
      "title": "Show HN: Onit – Source-available ChatGPT Desktop with local mode, Claude, Gemini",
      "url": "https://github.com/synth-inc/onit",
      "text": "Hey Hackernews, it’s Tim Lenardo, and I’m launching v1 of Onit today! Onit is ChatGPT Desktop, but with local mode and support for other model providers (Anthropic, GoogleAI, etc). It's also like Cursor Chat, but everywhere on your computer—not just in your IDE! Onit is open-source! You can download a pre-built version from our website: www.getonit.ai or build directly from the source code: GitHub. We built this because we believe in universal access: AI assistants should be accessible from anywhere on your computer, not just in the browser or in specific apps. Provider freedom: consumers should have the choice between providers (Anthropic, OpenAI, etc.), not be locked into a single one (ChatGPT Desktop only has OpenAI models). Local first: AI is more useful with access to your data, but that doesn’t count for much if you have to upload personal files to an untrusted server. Onit will always provide options for local processing, ensuring no personal data leaves your computer without approval. Customizability: Onit is your assistant, and you should be able to configure it to your liking. Extensibility: Onit should allow the community to build and share extensions, making it more useful for everyone.",
      "upvotes": 162,
      "comments": 57,
      "time_delta": "2025-01-24T22:15:16",
      "rank": 8,
      "score": 0.1588910296581372
    },
    {
      "title": "Show HN: A simple dictionary and vocab builder (Rust, Svelte, Tauri)",
      "url": "https://news.ycombinator.com/item?id=42833321",
      "text": "I love learning new words. However, I tend to forget them. When I find a new word, I’ll look up its definition and then save it to wherever is most convenient (Obsidian, my notes app, or I just keep the tab open in Safari). Collating these sources is a nightmare. I’ve tried various flashcard tools, but none are free, easy to use, available on mobile, and support spaced repetition. deft is the simplest app I could make to meet these goals:Built-in dictionary, Spaced repetition, Completely offline. The dictionary uses wiktionary.org. The spaced repetition algorithm is fsrs, which is similar to Anki.",
      "upvotes": 4,
      "comments": 2,
      "time_delta": "2025-01-26T19:47:02",
      "rank": 9,
      "score": 2.0737201373920304
    },
    {
      "title": "Show HN: I made an open-source video editor",
      "url": "https://github.com/cartesiancs/nugget-app",
      "text": "It's an open source video editor designed for motion effects and versatility. developed with electronjs / TypeScript, FFmpeg, Litjs. I'm currently focusing on making it easier to edit long-form videos. Specifically, adding subtitles to podcast episodes or creating short-form content from YouTube videos. And I’m also developing several extensible utilities. For example, recording video with a floating webcam—similar to Loom—or using LLMs to make cut editing easier. To make all this possible, I believe the first step is to build a versatile, general-purpose video editor.",
      "upvotes": 15,
      "comments": 0,
      "time_delta": "2025-01-26T08:52:10",
      "rank": 10,
      "score": 0.15645729381962656
    },
    {
      "title": "Show HN: I made a form builder to get people to speak their mind in realtime",
      "url": "https://yapz.app/",
      "text": "",
      "upvotes": 2,
      "comments": 3,
      "time_delta": "2025-01-26T19:00:35",
      "rank": 11,
      "score": 0.2866907208227753
    },
    {
      "title": "Show HN: Puck 0.18 adds drag-and-drop for CSS grid and Flexbox",
      "url": "https://github.com/measuredco/puck/releases/tag/v0.18.0",
      "text": "Hey HN! I just released Puck 0.18 with a new drag-and-drop engine for CSS grid and flexbox support. You can now use Puck to create a page builder that behaves like a design tool, but embedded within your own app and using your own React components. To use it, just add display: flex (or grid, etc) to your DropZone and Puck will gracefully handle drag-and-drop across all dimensions. Shout out to the dnd-kit maintainer Claudéric for the collaboration and support (if you’re reading this, I just sponsored you on GitHub!) and as always, a huge thanks to my wonderful community for all the testing and feedback. It would not be possible without you! If you've not heard of Puck, it's is an open-source visual editor for React that I maintain, available under MIT so you can safely embed it in your product. Some background: This is the culmination of 18 months of iteration, and has required several breakthroughs in drag-and-drop to achieve: drag-and-drop across iframes, accounting for layout shift across nested components, and natural collision detection are some of the problems that have kept me extremely busy. I hope to write about the process if time allows. The implementation is bleeding edge, using the experimental branch of dnd-kit with custom collision algorithms and plugins to implement a drag-and-drop experience that feels similar to react-beautiful-dnd, but across multiple dimensions. Happy to answer any questions! Will endeavour to reply to everyone.",
      "upvotes": 51,
      "comments": 8,
      "time_delta": "2025-01-22T12:39:50",
      "rank": 12,
      "score": 0.011633241911186917
    },
    {
      "title": "Show HN: I built a DIY plane spotting system at home",
      "url": "https://pilane.obviy.us/",
      "text": "",
      "upvotes": 195,
      "comments": 82,
      "time_delta": "2025-01-25T13:14:37",
      "rank": 13,
      "score": 0.3839019413398742
    },
    {
      "title": "Show HN: Krita RGBA Tech – Exploring Filter Engines in Open-Source Art",
      "url": "https://github.com/Draneria/Toolkit-by-Draneria_Krita-Brushes",
      "text": "Hello everyone! Last November, I made realistic metallic brushes for Krita. This time, I dived into the filter brush engine to create convenient ways to add thickness to paintstrokes (e.g. emboss), something which can make digital art look more appealing or traditional. I also created a special eraser which pays attention to the height of your brushwork, via an edge-detection filter + eraser blending mode. If there are any FOSS artists around, feel free to try them out",
      "upvotes": 47,
      "comments": 9,
      "time_delta": "2025-01-25T13:52:39",
      "rank": 14,
      "score": 0.09439142502751276
    },
    {
      "title": "Show HN: Actionate – GitHub Actions for JetBrains IDEs",
      "url": "https://github.com/revenate/actionate",
      "text": "I’m excited to share Actionate, a passion project my team and I have been building to reimagine GitHub Actions within JetBrains IDEs. We’ve spent over a decade working in innovation labs at major tech companies, but our true passion lies in crafting tools that we genuinely want to use every day. With Actionate, we’re not just integrating CI/CD into JetBrains; we’re leveraging the powerful building blocks provided by JetBrains and GitHub Actions to create new, transformative functionality. Our MVP (Minimum Viable Product) focuses on the most essential features we find critical for a smoother workflow, but the goal is to push beyond typical CI/CD boundaries and empower developers in ways that haven’t been possible before. If this vision resonates with you, we’d love for you to check out Actionate and let us know what you think—good or bad. We thrive on community input, and your feedback will shape our roadmap as we continue expanding on what’s possible inside the IDE. Thanks for reading, and I hope Actionate helps you take your GitHub Actions workflow to the next level!",
      "upvotes": 42,
      "comments": 12,
      "time_delta": "2025-01-25T20:23:33",
      "rank": 15,
      "score": 0.12837901740205926
    },
    {
      "title": "Show HN: Cs16.css – CSS library based on Counter Strike 1.6 UI",
      "url": "https://cs16.samke.me",
      "text": "",
      "upvotes": 787,
      "comments": 130,
      "time_delta": "2025-01-24T15:37:07",
      "rank": 16,
      "score": 0.6108730606564612
    },
    {
      "title": "Show HN: Habby – A straightforward bullet journal with habit tracking",
      "url": "https://habby.day/",
      "text": "Heya HN, I started journaling about a year ago and recently landed in my perfect setup, a simple sentence to remember each day, combined with a flexible habit tracker. Over the holidays I turned this approach into a free expo app that I want to share. Basically, you get: - One sentence per day, enough to remember each day. - Flexible habit tracking (still working on finding the best UX here) - No backend, no tracking, all in device (just sentry for errors) - Clean, minimal interface - Export your data - Stats to track your progress. I built this primarily for my own use, but I'd love to hear what the HN community thinks about it. Android is still in closed testing, but will be available soon. Thanks!",
      "upvotes": 61,
      "comments": 17,
      "time_delta": "2025-01-22T09:27:07",
      "rank": 17,
      "score": 0.013218505268162586
    },
    {
      "title": "Show HN: Trolling SMS spammers with Ollama",
      "url": "https://evan.widloski.com/software/sms_llm/",
      "text": "I've been working on a side project to generate responses to spam with various funny LLM personas, such as a millennial gym bro and a 19th century British gentleman. By request, I've made a write-up on my website which has some humorous screenshots and made the code available on Github for others to try out [0]. A brief outline of the system: - Android app listens for incoming SMS events and forwards them over MQTT to a server running Ollama which generates responses - Conversations are whitelisted and manually assigned a persona. The LLM has access to the last N messages of the conversation for additional context. [0]: https://github.com/evidlo/sms_llm. I'm aware that replying can encourage/allow the sender to send more spam. Hopefully reporting the numbers after the conversation is a reasonable compromise.",
      "upvotes": 310,
      "comments": 121,
      "time_delta": "2025-01-22T19:23:48",
      "rank": 18,
      "score": 0.08106422465969906
    },
    {
      "title": "Show HN: Lightpanda, an open-source headless browser in Zig",
      "url": "https://github.com/lightpanda-io/browser",
      "text": "We’re Francis and Pierre, and we're excited to share Lightpanda (https://lightpanda.io), an open-source headless browser we’ve been building for the past 2 years from scratch in Zig (not dependent on Chromium or Firefox). It’s a faster and lighter alternative for headless operations without any graphical rendering. Why start over? We’ve worked a lot with Chrome headless at our previous company, scraping millions of web pages per day. While it’s powerful, it’s also heavy on CPU and memory usage. For scraping at scale, building AI agents, or automating websites, the overheads are high. So we asked ourselves: what if we built a browser that only did what’s absolutely necessary for headless automation? Our browser is made of the following main components: - an HTTP loader - an HTML parser and DOM tree (based on Netsurf libs) - a Javascript runtime (v8) - partial web APIs support (currently DOM and XHR/Fetch) - and a CDP (Chrome Debug Protocol) server to allow plug & play connection with existing scripts (Puppeteer, Playwright, etc). The main idea is to avoid any graphical rendering and just work with data manipulation, which in our experience covers a wide range of headless use cases (excluding some, like screenshot generation). In our current test case Lightpanda is roughly 10x faster than Chrome headless while using 10x less memory. It's a work in progress, there are hundreds of Web APIs, and for now we just support some of them. It's a beta version, so expect most websites to fail or crash. The plan is to increase coverage over time. We chose Zig for its seamless integration with C libs and its comptime feature that allow us to generate bi-directional Native to JS APIs (see our zig-js-runtime lib https://github.com/lightpanda-io/zig-js-runtime). And of course for its performance :) As a company, our business model is based on a Managed Cloud, browser as a service. Currently, this is primarily powered by Chrome, but as we integrate more web APIs it will gradually transition to Lightpanda. We would love to hear your thoughts and feedback. Where should we focus our efforts next to support your use cases?",
      "upvotes": 305,
      "comments": 134,
      "time_delta": "2025-01-24T22:15:32",
      "rank": 19,
      "score": 0.3000691836834565
    },
    {
      "title": "Show HN: Using aerospace projects to teach maths [video]",
      "url": "https://www.youtube.com/watch?v=yJ-ovZGp-D0",
      "text": "Hi, my name is Aditya, and I’m working on teaching math through a mission-based approach. I’ve provided a video link that serves as a trailer for one of my challenges. Here’s how it works: 1. Understand the Challenge: In this mission, the goal is to design a UAV that can fly between mountains to avoid enemy radar. 2. Create Your Solution: Students create a basic design—either on paper or using Blender—while doing calculations. Topics like algebra, geometry, etc., come into play. Once ready, they upload their design. 3. AI Analysis: The AI analyzes the design, runs a simulation, and provides results in the form of expected output and points. The aim is simple: give students a project to work on so they can practice math while also learning about aerospace and science. I’m looking for feedback and beta users to test this approach. Any help or suggestions would be much appreciated! About me: I’ve been working on game-based learning for the past three years. I’ve built a few games to teach topics like trigonometry and algebra, and I’m constantly trying to push the boundaries of how students engage with STEM topics.",
      "upvotes": 29,
      "comments": 7,
      "time_delta": "2025-01-24T18:08:14",
      "rank": 20,
      "score": 0.023738850262481296
    },
    {
      "title": "Show HN: Using YOLO to Detect Office Chairs in 40M Hotel Photos",
      "url": "https://news.ycombinator.com/item?id=42779330",
      "text": "I used the YOLO object detection library from Ultralytics to scan over 40 million hotel photos and identify images with office chairs. This helped me create a map showing hotels suitable for remote work. Map: https://www.tripoffice.com/maps. Yolo: https://www.ultralytics.com/yolo. The whole process was done on a home Mac without the use of any LLMs. It's based on traditional object detection technology.",
      "upvotes": 220,
      "comments": 124,
      "time_delta": "2025-01-21T12:22:26",
      "rank": 21,
      "score": 0.034960785920654075
    },
    {
      "title": "Show HN: Magenta.nvim – AI coding plugin for Neovim focused on tool use",
      "url": "https://github.com/dlants/magenta.nvim",
      "text": "",
      "upvotes": 62,
      "comments": 8,
      "time_delta": "2025-01-21T03:07:07",
      "rank": 22,
      "score": 0.008593180210373778
    },
    {
      "title": "Show HN: I recovered one of my earliest ZX-Spectrum games from an audio cassette",
      "url": "https://news.ycombinator.com/item?id=42818581",
      "text": "I've been developing this on and off for a few weeks. There are a few videos on the README page showing demos of the plugin. I just shipped an update today, which adds: - inline editing with forced tool use - better pinned context management - prompt caching for anthropic - port to node (from bun). Check it out! —— Recently, I managed to recover some of my earliest work from the ZX Spectrum era from an old audio cassette. It is a mini-game, that I created as a teen, called Atomix, written in BASIC with a mix of Z80 assembly — some of which I coded myself, while other parts were disassembled from existing games. I put the game in a modern emulator and recorded a screencast. See the video in my LinkedIn post:",
      "upvotes": 49,
      "comments": 17,
      "time_delta": "2025-01-25T01:27:32",
      "rank": 23,
      "score": 0.05382870653209377
    },
    {
      "title": "Show HN: CopyCat (YC W25) – Free Alternative to OpenAI's $200 Operator",
      "url": "https://www.runcopycat.com/download",
      "text": "",
      "upvotes": 31,
      "comments": 13,
      "time_delta": "2025-01-25T01:14:59",
      "rank": 24,
      "score": 0.03335405215090956
    },
    {
      "title": "Show HN: Practice a second language by solving image-based puzzles",
      "url": "https://alkutshina.netlify.app/",
      "text": "",
      "upvotes": 4,
      "comments": 1,
      "time_delta": "2025-01-26T10:54:58",
      "rank": 25,
      "score": 0.04674038240268968
    },
    {
      "title": "Show HN: Apple-like smooth corners for Tailwind CSS",
      "url": "https://github.com/gtokman/corner-smoothing",
      "text": "",
      "upvotes": 31,
      "comments": 15,
      "time_delta": "2025-01-25T20:34:31",
      "rank": 26,
      "score": 0.09520436013266417
    },
    {
      "title": "Show HN: Bagels – TUI Expense Tracker",
      "url": "https://github.com/EnhancedJax/Bagels",
      "text": "Hi! I'm Jax and I've been building this cool little terminal app for myself to track my expenses and budgets! Other than challenging myself to learn Python, I built this mainly around the habit of budget tracking at the end of the day. (I tried tracking on-the-go, but the balance was always out of sync.) All data is stored in a single sqlite file, so you can export and process them all you want! The app is built using the textual API for Python! Awesome framework which feels like I'm doing webdev haha. You can check out some screenshots on gh: https://github.com/EnhancedJax/Bagels",
      "upvotes": 4,
      "comments": 0,
      "time_delta": "2025-01-26T08:57:51",
      "rank": 27,
      "score": 0.03400253556018941
    },
    {
      "title": "Show HN: I built an active community of trans people online",
      "url": "https://t4t.social/",
      "text": "A year ago I surveyed the internet and noticed there was only one popular space for trans and gender-non-conforming people to meet; Lex. Lex is not well liked by its users. Its software feels heavy and it is full of cash grabs and anti-patterns. It was recently acquired and is sure to only become more hostile to its users as it turns towards profit generation. With this in mind I built t4t, an alternative specially designed for not only queer people, but specifically trans people. It is an extremely lightweight service. I built it with my most ideal stack: Flutter, Svelte, Supabase, Posthog. It has grown in the last year to about 4,000 monthly active users. I think it could grow way beyond that this year.",
      "upvotes": 480,
      "comments": 338,
      "time_delta": "2025-01-23T05:07:35",
      "rank": 28,
      "score": 0.1518053582678916
    },
    {
      "title": "Show HN: Stratoshark, a sibling application to Wireshark",
      "url": "https://stratoshark.org/",
      "text": "Hi all, I'm excited to announce Stratoshark, a sibling application to Wireshark that lets you capture and analyze process activity (system calls) and log messages in the same way that Wireshark lets you capture and analyze network packets. If you would like to try it out you can download installers for Windows and macOS and source code for all platforms at https://stratoshark.org. AMA: I'm the goofball whose name is at the top of the About box in both applications, and I'll be happy to answer any questions you might have.",
      "upvotes": 310,
      "comments": 49,
      "time_delta": "2025-01-22T15:25:32",
      "rank": 29,
      "score": 0.07544964724840021
    },
    {
      "title": "Show HN: Open-source AI video editor",
      "url": "https://github.com/fal-ai-community/video-starter-kit",
      "text": "Hey HN community! I'm one of the lead devs of this project at fal.ai and we created an open source lightweight video editor powered by the latest media AI models. The main goal was to tackle some challenges when dealing with complex media handling and encoding on the browser. It all started as an internal experiment but as we tackled some of the issues it was clear there could be some value sharing it with the open source community. Some of the key points and tech stack details: - It uses IndexedDb, so all data is local (i.e. no auth, no cloud db) - Multiple AI models for video, image, music and voice-over. APIs are provided by fal.ai - Built with the typical React+Next.js, Shadcn front-end - Used remotion.dev for the realtime video preview (this is such a great project, without it the codebase would be twice as large) - File uploads so you can bring your own media by uploadthing.com - ffmpeg for encoding the final video and also some ui tricks, like the audio waveform. We deployed a version of it and for now it's free to use. We do plan to add some rate limiting and a bring your own API Key next, but it's open source and I'm curious about what the community will build on top of it, or derive from it. Customize your own video app and if you do, please share. If you have any questions, hit me up!",
      "upvotes": 264,
      "comments": 47,
      "time_delta": "2025-01-23T18:34:38",
      "rank": 30,
      "score": 0.1123992386897755
    }, 
    { 
      "title": "Show HN: I made an extension that turns Google Sheets into Google Slides",
      "url": "https://workspace.google.com/marketplace/app/botsheets_ai_content_generator/401292491579",
      "text": "",
      "upvotes": 7,
      "comments": 2,
      "time_delta": "2025-01-23T13:44:46",
      "rank": 31,
      "score": 0.0022878611982307846
    },
    {
      "title": "Show HN: Chat with multiple LLMs: o1-high-effort, Sonnet 3.5, GPT-4o, and more",
      "url": "https://polychat.co",
      "text": "Hello HN! I was fed up switching between multiple UIs to ask GPT, Claude, etc., the same question and comparing the answers. So I built a way to ask multiple models the same question efficiently by having the LLM compare the responses and only show you new and valuable information from the second model. This way you still get a fast response as normal from the first model, but also get any added value provided by the second model. Initially I built my own UI to use this, but stumbled upon Open WebUI (formerly Ollama WebUI) which is fantastic but is made more for local access to LLMs. So I talked to its creator, Timothy Baek, and he mentioned that security needed to be shored up before production deployment. I did some scans with semgrep and fixed some XSRF and CORS issues along with making sure the JWT tokens, passwords, etc., were secure. This was in addition to other folks' amazing security contributions. So now we build on Open WebUI! OSS ftw. After launching privately a month or so ago and posting a few Reddit links, I have about 100 users. We also just got access to the o1 API and provide o1-high, medium, and low effort. o1 high effort is able to solve coding problems that only o1 pro can also solve, though pro can go further and has better formatting. o1 high effort is a nice option if you don't want to fork over $200/mo. https://www.reddit.com/r/OpenAI/comments/1i0r867/comment/m70... You can use o1 for free in PolyChat, which is the only place I've seen you can do so. You can also ask multiple models the same question and stream the answers simultaneously side by side. https://imgur.com/a/ly5ZPh8. And you can have multiple chats going simultaneously, and they will continue in the background and notify you when they're done. Another cool feature that makes long chats way easier to navigate is the overview (three dots on top right of chat) https://imgur.com/a/PoB1phT. We give you full control, unlike most providers, to change the system prompt, temperature, etc., in the chat settings in the Controls on the top right. The formatting for code outputs and inputs is fantastic, using codemirror, and you can run code in the code blocks if it's Python or JS using in-browser runtimes. You can also share chats within PolyChat where other logged-in users can see them: e.g., https://polychat.co/s/ec163812-9323-4cb5-a429-7ddeaf3572c3. Or you can share it publicly to the OpenWeb UI community https://openwebui.com/c/crizcraig/e1b2fff9-30a3-4ee7-8eed-b2.... Finally, we allow you to search and organize your chats into folders, which makes finding things super fast! Infra: My custom backend that combines models and does things Open WebUI doesn't handle, like token tracking, is written in FastAPI and uses LiteLLM for easily accessing different model APIs. I host everything on GCP using Cloud Run for the backend and use Postgres for Open WebUI's db, along with BigQuery and Firestore for my FastAPI app's db. Pricing: Our pricing makes it cheap to access top models. It's free at first; then we offer subscription tiers starting at $5/mo, which allots about ~1 million tokens per month, enough for most people. But unlike Claude's UI, for example, we don't shut you down with rate limits, but rather let heavy users upgrade beyond to $10, $20, $40, $80, etc. We also suggest a plan based on how quickly you used your free tokens, so you have an idea upfront of the monthly cost before you buy. And you can upgrade or downgrade at any time. Thanks Show HN <3.",
      "upvotes": 61,
      "comments": 32,
      "time_delta": "2025-01-21T19:40:44",
      "rank": 32,
      "score": 0.010635286920828824
    },
    { 
      "title": "Show HN: Browse Anime from the Terminal",
      "url": "https://github.com/Benexl/FastAnime",
      "text": "",
      "upvotes": 2,
      "comments": 0,
      "time_delta": "2025-01-26T07:36:04",
      "rank": 33,
      "score": 0.009298535691463883
    },
    {
      "title": "Show HN: New Social Music Sharing and Discovery App",
      "url": "https://news.ycombinator.com/item?id=42828324",
      "text": "I've recently released the beta version of my app, Solance, to the App Store and Google Play Store. The app is aimed at people who want to share and discover new music to add to their playlists. However, it's a bit different as this app isn't based off algorithms finding music for you; it's based on seeing what your friends listen to. Within the app, you will have your main Solance feed (similar to Instagram), where songs from your friends will appear in a post-like format that includes four songs at a time. In this feed, you can listen to previews of the songs, interact with others by liking and/or commenting on the songs, and also saving the song directly to your Spotify. You will also get a Solance profile showing the music you recently listened to and your top artists. You can search for users to see who would have a music taste that you would like to see more of. The app is in beta at the moment and purely has core functionality only as we are just trying to get feedback to see what features to move forward with. It would be awesome if you guys could download and give the app a try and leave some feedback! The website is https://solance.app. If you need some Solance usernames to start off and get a feel for the app before inviting any friends, feel free to add users dan & ryan :).",
      "upvotes": 3,
      "comments": 1,
      "time_delta": "2025-01-26T07:08:43",
      "rank": 34,
      "score": 0.017514037478613124
    },
    {
      "title": "Show HN: NotepadJs – A cross-platform love letter to Notepad",
      "url": "https://github.com/itamarom/notepadjs",
      "text": "As a native Windows user who switched to macOS a few years back, one thing I never got over was the simplicity and usefulness of the old school Notepad app. This app aims to recreate that very same experience, cross-platform and easily installable as a PWA. I've been using this for personal use for around two years, and I figured it was time to share it with the world. Criticism, issues, and PRs are welcome. Thanks!",
      "upvotes": 145,
      "comments": 113,
      "time_delta": "2025-01-22T11:59:29",
      "rank": 35,
      "score": 0.03309725113227371
    },
    {
      "title": "Show HN: libmodulor – An opinionated TS library to build multi-platform apps",
      "url": "https://github.com/c100k/libmodulor",
      "text": "Initially, I started building this for my own projects. The main goal was to define a unified blueprint allowing me to develop multi-platform apps using the same code without code generation. I wanted to be able to develop the same functionality on web, desktop, CLI, server, mobile, whatever. I've been able to achieve this by relying on TypeScript, a 4-layer architecture (UseCase => App => Product => Target), and dependency injection. This mechanism allows me to use whatever tech stack I want, provided the good adapters are developed. For instance, I have pre-built ones: node express (server), next.js (server), node hono (server in alpha), node parseArgs (CLI), node stricli (CLI), react-web-pure (web with no CSS), react-native (mobile), node mcp server (anthropic MCP in alpha), etc. The same goes with data storage: Postgres, SQLite, a txt file, whatever. It also comes with auto-testing and auto-documentation. Did I reinvent the wheel? Probably on some aspects. Is it too much abstraction? Probably as well. But I like the idea of modularity and portability. That's why it's not made for everyone, nor all types of projects. If you like testing new stuff, give it a try and feel free to ping me if needed, I'd love to help. I'm aware the documentation is not state of the art yet. I wanted to focus on the Getting started Guide to give a quick overview instead of going too deeply into the details. Best.",
      "upvotes": 49,
      "comments": 25,
      "time_delta": "2025-01-23T15:30:12",
      "rank": 36,
      "score": 0.019056199140460944
    },
    {
      "title": "Show HN: I organized Bluesky feeds by categories and growth scoreings",
      "url": "https://www.bskyinfo.com/feeds/",
      "text": "I’ve curated and organized Bluesky feeds into 50+ categories, now with growth scoreings for the past day and week! Check it out and share your thoughts!",
      "upvotes": 141,
      "comments": 105,
      "time_delta": "2025-01-23T01:26:52",
      "rank": 37,
      "score": 0.041181728657063786
    },
    {
      "title": "Show HN: I made a service to convert WordPress blogs to Hugo",
      "url": "https://wp2hugo.blogdb.org/",
      "text": "Hi Hacker News! I made this project to read a WordPress export and create the markdown files for Hugo. It'll speed up the process of moving your blog over to Hugo and let you avoid a bunch of manual work. It came about when I was talking to somebody who was trying to move their site over and didn't want to manually copy and reformat all their posts. They had trouble finding a tool to do it, so I wrote one. I want to make sure it's useful to people before charging them, so it'll give you a download with three pages and five blog posts converted for free and without asking for any information. If you like what you see, there is a one-time charge through Stripe to convert everything. I hope you find it useful, and I welcome any and all feedback on it! Thanks for reading!",
      "upvotes": 97,
      "comments": 42,
      "time_delta": "2025-01-22T17:28:20",
      "rank": 38,
      "score": 0.02429884462525441
    },
    {
      "title": "Show HN: I made a app that uses NFC as a physical switch to block distractions",
      "url": "https://www.foqos.app",
      "text": "Hi HN! Super proud to showcase Foqos! I wanted to create a way to physically block apps on my phone, always had a bunch of NFC tags, combined the two together over the holiday break, and Foqos was born. You can create profiles, write them to NFC tags, and track your weekly focus. It’s completely open source and will always be free! There is an affiliate link in the app for NFC tags, and donations are completely optional. Link here: https://apps.apple.com/ca/app/foqos/id6736793117.",
      "upvotes": 225,
      "comments": 106,
      "time_delta": "2025-01-21T16:52:42",
      "rank": 39,
      "score": 0.03810771643600508
    },
    {  
      "title": "Show HN: I made a mini golf in my lunch time",
      "url": "https://paper-golf.netlify.app/",
      "text": "",
      "upvotes": 174,
      "comments": 83,
      "time_delta": "2025-01-18T08:16:17",
      "rank": 40,
      "score": 0.011960163736070341
    },
    {
      "title": "Show HN: Printercow – Turn any thermal printer into an API endpoint",
      "url": "https://www.printercow.com/",
      "text": "I've always been fascinated by thermal printers—there's something magical about seeing text and images materialize on paper in seconds. But I found that working with them programmatically was always a pain. You either had to deal with ancient printer protocols or use clunky vendor-specific SDKs. So I built Printercow (https://printercow.com)—it turns any thermal printer into an HTTP endpoint with just one command. Technical details: - Supports any ESC/POS-compatible printer (Epson, Star Micronics, etc.) - Handles paper widths from 58mm to 120mm - Automatic image dithering and scaling - Built-in failover protection for high-volume scenarios. Don't have a printer yet but want to try it out? I've got you covered! When you sign up, you get 300 free prints, and you can watch your creations come to life on my printer via Twitch live stream (https://twitch.tv/printercow). Perfect for testing your integration before committing to hardware. I'm particularly excited about the AI integration possibilities. Instead of yet another chat interface, you can have AI generate content that exists in the physical world—artwork, poems, to-do lists, custom receipts, etc. Would love to hear your thoughts, feature requests, or creative use cases you can think of! Also happy to answer any technical questions about the implementation.",
      "upvotes": 150,
      "comments": 103,
      "time_delta": "2025-01-21T11:06:12",
      "rank": 41,
      "score": 0.02335684582288585
    },
    {  
      "title": "Show HN: LLM-Reasoner:Make any LLM to think deeper like OpenAI o1",
      "url": "https://github.com/harishsg993010/LLM-Reasoner",
      "text": "",
      "upvotes": 2,
      "comments": 0,
      "time_delta": "2025-01-26T02:12:51",
      "rank": 42,
      "score": 0.005070643239764935
    },
    {  
      "title": "Show HN: IconFst – Yet Another AI Icon Generator",
      "url": "https://iconfst.com",
      "text": "",
      "upvotes": 4,
      "comments": 2,
      "time_delta": "2025-01-26T02:08:06",
      "rank": 43,
      "score": 0.015097514263679614
    },
    {  
      "title": "Show HN: I categorized all 49,317 Bluesky starter packs into 5,158 categories",
      "url": "https://blueskystarterpack.com/categories",
      "text": "",
      "upvotes": 5,
      "comments": 0,
      "time_delta": "2025-01-26T00:08:37",
      "rank": 44,
      "score": 0.016810861509116513
    },
    {
      "title": "Show HN: Snap Scope – Visualize Lens Focal Length Distribution from EXIF Data",
      "url": "https://snap-scope.shj.rip/?lng=en",
      "text": "Hey HN, I built this tool because I wanted to understand which focal lengths I actually use when taking photos. It's a web app that analyzes EXIF data to visualize focal length distribution patterns. While it's admittedly niche (focused specifically on photography), I think it could be useful for photographers trying to understand their lens usage patterns or making decisions about lens purchases. Features: Client-side EXIF data processing (no server uploads/tracking) / Handles thousands of photos at once / Clean visualization with shareable summaries. This tool supports most RAW formats, but you might occasionally encounter files where EXIF extraction fails. In such cases, converting to more common formats like JPEG usually resolves the issue. Try it out: https://snap-scope.shj.rip/?lng=en. Source: https://github.com/Gumball12/snap-scope.",
      "upvotes": 13,
      "comments": 12,
      "time_delta": "2025-01-24T14:18:25",
      "rank": 45,
      "score": 0.008916641173425957
    },
    {  
      "title": "Show HN: Personalized Duolingo (kind of) for vocabulary building",
      "url": "https://github.com/baturyilmaz/wordpecker-app",
      "text": "",
      "upvotes": 159,
      "comments": 65,
      "time_delta": "2025-01-20T16:27:22",
      "rank": 46,
      "score": 0.019456284698069724
    },
    {
      "title": "Show HN: Opennote – Personalized Learning, Perfected",
      "url": "https://opennote.me",
      "text": "Check out our launch article as well, if you’re interested! https://opennote.me/labs/introducing-feynman.",
      "upvotes": 9,
      "comments": 1,
      "time_delta": "2025-01-25T08:23:48",
      "rank": 47,
      "score": 0.0122378213450127
    },
    {
      "title": "Show HN: Freelens OSS Kubernetes IDE",
      "url": "https://github.com/freelensapp/freelens",
      "text": "Hello everyone, disappointed that Open Lens has become closed source, I and other enthusiasts are trying to continue its open source project with Freelens. We hope this will help others who like us used Open Lens as a graphical IDE to work with Kubernetes, continuing to give the community the opportunity to develop it by directly contributing to its realization as an open source project. What do you think? Any feedback or contribution is welcome! Thanks!",
      "upvotes": 2,
      "comments": 2,
      "time_delta": "2025-01-25T19:20:24",
      "rank": 48,
      "score": 0.002896292800506144
    },
    {
      "title": "Show HN: Open-Source Bloomberg Terminal Alternative for Investment Research",
      "url": "https://github.com/Fincept-Corporation/FinceptTerminal",
      "text": "Fincept Terminal is your one-stop solution for investment research and data analysis, and the exciting part is it's free and open source. What data can you find on Terminal? Everything from economics, trade, financial markets, all kinds of asset classes—truly there are no limitations. You can add your own add sources of any kind. From good and appealing visualization to exports, all the data we truly provide you power to change and edit the results and sources. We have integrated AI models that are independently capable of analyzing portfolios, news, and sectors. We are truly working day and night to make it better. Please star the repo to receive future updates on the repo. Also, we are looking for active contributors from different countries; if you are the one, kindly fork the repo and help us to beat the most expensive terminal in the world.",
      "upvotes": 3,
      "comments": 3,
      "time_delta": "2025-01-25T18:17:40",
      "rank": 49,
      "score": 0.0053915051290133985
    },
    {
      "title": "Show HN: OpenCharacter – open-source, uncensored CharacterAI",
      "url": "https://opencharacter.org/",
      "text": "I made an open source alternative to c.ai using OpenRouter and recreating the old site's UI that people were missing. Code: https://github.com/bobcoi03/opencharacter/. Have nearly all feature parity like regenerates, personas, etc.",
      "upvotes": 14,
      "comments": 0,
      "time_delta": "2025-01-23T07:44:21",
      "rank": 50,
      "score": 0.004346540365715272
    },
    {  
      "title": "Show HN: Terraform Provider for Inexpensive Switches",
      "url": "https://github.com/brennoo/terraform-provider-hrui",
      "text": "",
      "upvotes": 90,
      "comments": 13,
      "time_delta": "2025-01-18T13:14:15",
      "rank": 51,
      "score": 0.006430912515570438
    },
    {
      "title": "Show HN: LLMpeg",
      "url": "https://github.com/jjcm/llmpeg",
      "text": "",
      "upvotes": 169,
      "comments": 79,
      "time_delta": "2025-01-15T02:29:43",
      "rank": 52,
      "score": 0.0065061944687888834
    },
    {
      "title": "Show HN: Write Your CV in Markdown, Get Website and PDF with CI/CD",
      "url": "https://github.com/engineervix/cv",
      "text": "Hi HN! I wrote this to solve my own frustration with having a single source of truth for my CV, and being able to produce output in different formats. I wanted something that would: - Be version-controlled and simple to maintain (hence Markdown) - Generate both a simple website and a PDF - Support automated rebuilds via CI/CD - Be easy to customize without dealing with LaTeX - Support a simple development workflow. The tool uses Vite, Marked for Markdown parsing, and Puppeteer for PDF generation. All styling is done with SCSS, and the JavaScript is vanilla—no frameworks needed. I've been using it personally for a while and thought others might find it useful. Would love feedback, especially on the PDF generation and styling aspects! The project is MIT licensed, so feel free to fork and adapt it for your needs.",
      "upvotes": 5,
      "comments": 1,
      "time_delta": "2025-01-25T16:24:55",
      "rank": 53,
      "score": 0.009542807506087544
    },
    {  
      "title": "Show HN: Interactive systemd – a better way to work with systemd units",
      "url": "https://isd-project.github.io/isd/",
      "text": "",
      "upvotes": 545,
      "comments": 204,
      "time_delta": "2025-01-18T16:22:03",
      "rank": 54,
      "score": 0.040441199551040564
    },
    {
      "title": "Show HN: Steganographically encode messages with LLMs and Arithmetic Coding",
      "url": "https://github.com/shawnz/textcoder",
      "text": "Good morning HN! For a while now, I have been toying with this idea and now finally have a working prototype. This project allows you to encode secret messages into ordinary-looking text by using arithmetic coding with a probability model derived from an LLM. By encrypting the message and then decompressing the encrypted message using the arithmetic coder, you get output which looks just like randomly sampled output from the LLM. Except, it actually encodes your secret messages in the specific choices of tokens. By using authenticated encryption, only a user who knows the key can know that a message is present. To others, the messages appear almost indistinguishable from typical LLM output. This technique allows you to hide your secret messages in a public channel without other users even knowing that a secret conversation is taking place. For example, the prototype is instructed to output text which could plausibly look like a tweet on Twitter. This allows you to post your secret messages in an accessible public space without being discovered. This could be beneficial for situations where users don't want to draw suspicion for using encrypted messaging, such as if they are trying to avoid state-sponsored spying. On the other hand, a potentially nefarious use of this technology could be the sharing of botnet command-and-control messages. By taking advantage of a technology like this, the messages could be shared in a public space where they could be widely distributed without an effective way to detect or block them. This project is at an early stage and any feedback or contributions are welcome! Thanks for reading, Shawn.",
      "upvotes": 7,
      "comments": 0,
      "time_delta": "2025-01-25T13:39:11",
      "rank": 55,
      "score": 0.012127615367235287
    },
    {
      "title": "Show HN: OSS AI assistant for answering questions from Docs and GitHub Issues",
      "url": "https://github.com/ragpi/ragpi",
      "text": "I’ve been working on Ragpi, an open-source AI assistant that builds knowledge bases from docs, GitHub Issues, and READMEs. It uses Redis Stack as a vector DB and leverages RAG to answer technical questions through an API. Some things it does: - Creates knowledge bases from documentation websites, GitHub Issues, and READMEs - Uses hybrid search (semantic + keyword) for retrieval - Uses tool calling to dynamically search and retrieve relevant information during conversations - Works with OpenAI or Ollama - Provides a simple REST API for querying and managing sources. Built with: FastAPI, Redis Stack, and Celery. It’s still a work in progress, but I’d love some feedback! Repo: https://github.com/ragpi/ragpi. API Reference: https://docs.ragpi.io.",
      "upvotes": 3,
      "comments": 0,
      "time_delta": "2025-01-25T13:31:53",
      "rank": 56,
      "score": 0.004014492400041263
    },
    {  
      "title": "Show HN: Offeryn – Build Tools for LLMs in Rust, with Model Context Protocol",
      "url": "https://github.com/avahowell/offeryn",
      "text": "",
      "upvotes": 6,
      "comments": 0,
      "time_delta": "2025-01-24T22:04:09",
      "rank": 57,
      "score": 0.004892457422151694
    },
    {
      "title": "Show HN: CFRS[] Community Demos: Patterns with turtle graphics using 6 commands",
      "url": "https://news.ycombinator.com/item?id=42773436",
      "text": "Hello HN! Back in 2023, I introduced CFRS[], a minimalist drawing language with turtle graphics, featuring just six simple commands, through a Show HN post (https://news.ycombinator.com/item?id=37956065). Since then, I've received a number of creative patterns and animations created using this tiny, esoteric language by the small and friendly community that has since formed around it. In this post, I intend to share some of these interesting creations with everyone to highlight the ingenuity of their creators. If you create an interesting demo using this language, please share it in the comments--I'd love to see it! Demos contributed by various HNers: https://susam.github.io/cfrs/demo.html. Try CFRS[] here: https://susam.net/cfrs.html.",
      "upvotes": 28,
      "comments": 1,
      "time_delta": "2025-01-20T21:47:11",
      "rank": 58,
      "score": 0.003550780756252441
    },
    {  
      "title": "Show HN: GUI for editing Mermaid class diagrams",
      "url": "https://docs.mermaidchart.com/blog/posts/gui-for-editing-mermaid-class-diagrams",
      "text": "",
      "upvotes": 230,
      "comments": 59,
      "time_delta": "2025-01-17T15:36:01",
      "rank": 59,
      "score": 0.013751284669407244
    },
    {
      "title": "Show HN: I made Tinder, but for side hustlers",
      "url": "https://www.devmarket.pro",
      "text": "Hey HN, This is DevMarket, a platform connecting technical and non-technical people to work on side projects together. You swipe right until you find a profile that resonates with you, use tools to evaluate them, and start a project with clear agreements in place. It’s designed as an end-to-end solution for cofounder matching, and our motivation is to make cofounder finding easy for everyone. I hope you enjoy it. Would love your feedback. Daniel.",
      "upvotes": 18,
      "comments": 13,
      "time_delta": "2025-01-23T09:07:18",
      "rank": 60,
      "score": 0.005853578811283655
    },
    {  
      "title": "Show HN: Amurex – An open source AI meeting copilot",
      "url": "https://sansyrox.github.io/amurex_ce/",
      "text": "",
      "upvotes": 90,
      "comments": 35,
      "time_delta": "2025-01-21T12:29:22",
      "rank": 61,
      "score": 0.0142143836072019
    },
    { 
      "title": "Show HN: Interactive game teaching dark patterns in UX design",
      "url": "https://games.productartistry.com/games/dark-patterns",
      "text": "",
      "upvotes": 179,
      "comments": 64,
      "time_delta": "2025-01-17T14:23:56",
      "rank": 62,
      "score": 0.010581334928998511
    },
    {
      "title": "Show HN: Mixlist",
      "url": "https://www.mixlist.org/",
      "text": "built a web app that uses k-means clustering on artist genres (one or multiple) to automatically organize Spotify liked songs into playlists. clean UI. you might have to click refresh playlists a couple of times to get what you want. comments are appreciated. thanks!",
      "upvotes": 33,
      "comments": 25,
      "time_delta": "2025-01-23T17:41:30",
      "rank": 63,
      "score": 0.013361537777382106
    },
    {
      "title": "Show HN: BrowserAI – Run LLMs directly in browser using WebGPU (open source)",
      "url": "https://github.com/sauravpanda/BrowserAI",
      "text": "Check out this impressive project that enables running LLMs entirely in the browser using WebGPU. Key features: - Zero token costs, no cloud infrastructure required - Complete data privacy through local processing - Simple 3-line code integration - Built on MLC and Transformer.js. The benchmarks show smaller models can effectively handle many common tasks. Currently the project roadmap includes: - No-code AI pipeline builder - Browser-based RAG for document chat - Analytics/logging - Model fine-tuning interface.",
      "upvotes": 84,
      "comments": 21,
      "time_delta": "2025-01-22T17:40:09",
      "rank": 64,
      "score": 0.021066220475184992
    },
    {
      "title": "Show HN: I made a simple agentic framework in JavaScript",
      "url": "https://github.com/anandrmedia/envoyjs",
      "text": "Well, I wouldn't call it a framework, but rather an easy way to define tools and agents, allowing the agent to think and do the work. - Currently supports OpenAI and DeepSeek models. I tried building an HN title recommender agent with this framework that analyzes top-performing posts on HN and suggests titles for HN posts. And this was the agent's reply after inspecting 10 best posts: Having analyzed the top 10 performing posts on Hacker News, we've observed that successful titles are often concise, intriguing, and sometimes provocative or impactful. They tend to evoke curiosity, highlight significant issues, or reveal unexpected information. Based on these insights and considering the unique nature of your GitHub repo, which introduces an agentic framework in JavaScript, here's a suggested title and message for your Hacker News post: Title: 'EnvoyJS: A New Frontier in JavaScript - Introducing Agentic Frameworks'. Lol :P Still a lot of work to do!",
      "upvotes": 10,
      "comments": 2,
      "time_delta": "2025-01-22T21:18:21",
      "rank": 65,
      "score": 0.002442757945114341
    },
    {  
      "title": "Show HN: A submarine combat game in the browser",
      "url": "https://bearingsonly.net/",
      "text": "",
      "upvotes": 57,
      "comments": 24,
      "time_delta": "2025-01-21T18:24:10",
      "rank": 66,
      "score": 0.00973471349128115
    },
    {
      "title": "Show HN: SudokuVariants – play and construct different variants of Sudoku",
      "url": "https://sudokuvariants.com",
      "text": "Hi HN, I've been working on this Sudoku web app for the past couple of years, on and off during free weekends and afternoons. I started working on it because I was bored during COVID, and Cracking the Cryptic had just become popular on YouTube, which got me wondering how hard it could be to make a Sudoku app. The main idea is for the app to understand the constraints and know how to solve Sudoku grids (and not just be a simple Sudoku drawing/playing app). When it comes to classic Sudoku, the solver doesn't support anything more complicated than X-Wing, but it understands the constraints. At the moment, most of the popular variants are supported: killer, sandwich, arrow, thermo, palindrome, German whisper, kropki, consecutive, non-consecutive, greater than, XV, diagonal, anti-king, anti-knight, even-odd, windoku, renban, and zipper. The only variant I am yet to add support for is quadruple. If any other variant becomes popular, I will probably add it, as was the case with zipper lines during development. A user account is not required to play, but it is required if you want to publish a public grid on the app. The app doesn't collect any PII, doesn't have ads or trackers. Accounts are identified by email hash; I am not storing email addresses or passwords, and OTPs are sent by email. The less I know about users, the better for both sides. The app supports mobile devices, but it works best on bigger screens. It was built using Blazor SSR/WASM (AOT) with SVG for interactive parts. I know there are some performance issues (especially on mobile phones and with touch input), and I am trying to address them. Some of the features I was thinking about adding are classifying grids by difficulty, daily Sudoku, and maybe campaigns (groups of Sudoku grids where users have to solve them in order). If you like Sudoku, or more specifically variants of Sudoku, please let me know what you think about SudokuVariants. URL: https://sudokuvariants.com. Thanks!",
      "upvotes": 28,
      "comments": 15,
      "time_delta": "2025-01-21T16:49:32",
      "rank": 67,
      "score": 0.004586840662167942
    },
    {  
      "title": "Show HN: A blocklist to remove spam and bad websites from search results",
      "url": "https://github.com/popcar2/BadWebsiteBlocklist",
      "text": "",
      "upvotes": 225,
      "comments": 84,
      "time_delta": "2025-01-14T14:06:41",
      "rank": 68,
      "score": 0.008028127014880057
    },
    { 
      "title": "Show HN: Theralist – A Better Way to Find Therapists in Canada",
      "url": "https://theralist.ca/",
      "text": "Hey HN, I built Theralist, a free directory to help Canadians find mental health therapists based on what matters most—speciality, client age, therapist gender, languages, and more. The site allows users to search by city, province, or therapist name, making it easier to connect with the right professional. My goal is to simplify the process of finding qualified therapists while giving people more control over their search criteria. Would love to get your thoughts and feedback! Any suggestions for improving the experience or adding features?",
      "upvotes": 4,
      "comments": 0,
      "time_delta": "2025-01-25T04:25:15",
      "rank": 69,
      "score": 0.003805092093315882
    },
    {  
      "title": "Show HN: Automatic JVM Bytecode Parallelizer (2.8× speedup, no source changes)",
      "url": "https://deviantabstraction.com/2025/01/17/a-proof-of-concept-of-a-jvm-autoparallelizer/",
      "text": "",
      "upvotes": 2,
      "comments": 0,
      "time_delta": "2025-01-25T02:50:04",
      "rank": 70,
      "score": 0.0011839503536737077
    },
    {  
      "title": "Show HN: Compile C to Not Gates",
      "url": "https://github.com/tomhea/c2fj",
      "text": "",
      "upvotes": 145,
      "comments": 63,
      "time_delta": "2025-01-17T19:36:37",
      "rank": 71,
      "score": 0.00893293162247526
    },
    {  
      "title": "Show HN: Real-Time AI Agentic Cold Caller",
      "url": "https://cold-caller-9000.vercel.app/",
      "text": "",
      "upvotes": 4,
      "comments": 0,
      "time_delta": "2025-01-25T00:29:59",
      "rank": 72,
      "score": 0.0032241649707998735
    },
    {  
      "title": "Show HN: Value likelihoods for OpenAI structured output",
      "url": "https://arena-ai.github.io/structured-logprobs/",
      "text": "",
      "upvotes": 115,
      "comments": 42,
      "time_delta": "2025-01-14T15:52:43",
      "rank": 73,
      "score": 0.004130174937558301
    },
    { 
      "title": "Show HN: I made a tool that generates your Chinese name based on your name",
      "url": "https://www.chname.dev/",
      "text": "Hacked it together over the weekend. It can tell you the meaning of each character, how to write it, and how to pronounce it!",
      "upvotes": 18,
      "comments": 9,
      "time_delta": "2025-01-24T16:42:29",
      "rank": 74,
      "score": 0.013672911272210545
    },
    {
      "title": "Show HN: Vole Machine ISA Simulator",
      "url": "https://faresbakhit.github.io/vole-sim/",
      "text": "Just sharing this project [0] I've worked on a while ago, it's not that interesting but I was proud of making it. It has a CLI and a GUI that is done with Dear ImGui and includes an instruction editor, memory and registers viewer, and a canvas that is manipulated with an extra instruction made specifically for the GUI! This is not my first attempt at a virtual machine implementation, I've done the popular LC-3 VM before [1], check it out if you're interested to see Rust code rather than C++ ;) [0]: https://github.com/faresbakhit/vole-sim [1]: https://github.com/faresbakhit/lc3-vm.",
      "upvotes": 2,
      "comments": 0,
      "time_delta": "2025-01-24T21:32:50",
      "rank": 75,
      "score": 0.0009575921497356927
    },
    {  
      "title": "Show HN: WASM-powered codespaces for Python notebooks on GitHub",
      "url": "https://docs.marimo.io/guides/publishing/playground/#open-notebooks-hosted-on-github",
      "text": "",
      "upvotes": 204,
      "comments": 27,
      "time_delta": "2025-01-14T17:46:41",
      "rank": 76,
      "score": 0.007441151385048246
    },
    {  
      "title": "Show HN: Simplex: Automate browser workflows using code and natural language",
      "url": "https://www.simplex.sh/playground",
      "text": "",
      "upvotes": 147,
      "comments": 37,
      "time_delta": "2025-01-14T21:30:14",
      "rank": 77,
      "score": 0.005477211443860223
    },
    {  
      "title": "Show HN: Race Timing with Integrated Replay",
      "url": "https://storytiming.racing",
      "text": "",
      "upvotes": 25,
      "comments": 2,
      "time_delta": "2025-01-20T06:24:11",
      "rank": 78,
      "score": 0.0026255297488169045
    },
    {
      "title": "Show HN: WebMarker – Mark web pages for use with vision-language models",
      "url": "https://www.webmarkerjs.com/",
      "text": "WebMarker is a JavaScript library used for adding visual markers and labels to elements on a web page. This can be used for Set-of-Mark prompting, which improves visual grounding abilities of vision-language models such as GPT-4o, Claude 3.5, and Google Gemini 1.5. This library aims to: - Improve LLM performance on vision tasks referencing web pages - Enable reliable web page interactions based on LLM responses.",
      "upvotes": 2,
      "comments": 0,
      "time_delta": "2025-01-24T17:59:39",
      "rank": 79,
      "score": 0.000841092132541327
    },
    {  
      "title": "Show HN: Google Translate for Code",
      "url": "https://codecompare.cc",
      "text": "",
      "upvotes": 4,
      "comments": 0,
      "time_delta": "2025-01-23T20:07:56",
      "rank": 80,
      "score": 0.0013290721868484464
    },
    {
      "title": "Show HN: Pokemon BattleSim – Make your friends into Pokemon",
      "url": "https://github.com/mhw32/pokemon-battlesim",
      "text": "OP here! This project is a Pokemon battle simulator that lets you replace the names and moves with your friends. If you’ve ever told your friends what Pokemon they would be—this is the game for you. Make a playable Pokemon battle, pit friends against friends, and see who would win. The game is built with React Native. Check out the demo in Github! Clone it to build your own custom version.",
      "upvotes": 4,
      "comments": 1,
      "time_delta": "2025-01-24T16:01:36",
      "rank": 81,
      "score": 0.0023573869227453232
    },
    {  
      "title": "Show HN: DBOS TypeScript – Lightweight Durable Execution Built on Postgres",
      "url": "https://github.com/dbos-inc/dbos-transact-ts",
      "text": "",
      "upvotes": 76,
      "comments": 47,
      "time_delta": "2025-01-16T17:10:35",
      "rank": 82,
      "score": 0.003784628839007065
    },
    { 
      "title": "Show HN: A mathematical introduction to Reinforcement Learning",
      "url": "https://scutifer.xyz/p/rl/",
      "text": "",
      "upvotes": 4,
      "comments": 0,
      "time_delta": "2025-01-24T14:06:38",
      "rank": 83,
      "score": 0.0022115791905784475
    },
    {  
      "title": "Show HN: Humbug – an open source AI dev environment mostly built by AI",
      "url": "https://github.com/m6r-ai/humbug",
      "text": "",
      "upvotes": 18,
      "comments": 4,
      "time_delta": "2025-01-20T21:50:41",
      "rank": 84,
      "score": 0.0022360527403685604
    },
    {  
      "title": "Show HN: News Minimalist – News scoreed by significance",
      "url": "https://www.newsminimalist.com/",
      "text": "",
      "upvotes": 84,
      "comments": 60,
      "time_delta": "2025-01-15T20:35:15",
      "rank": 85,
      "score": 0.003619865230982785
    },
    { 
      "title": "Show HN: Created my first portfolio using Next.js",
      "url": "https://anmolbaranwal.com/",
      "text": "",
      "upvotes": 4,
      "comments": 0,
      "time_delta": "2025-01-24T12:33:44",
      "rank": 86,
      "score": 0.0021037458335480775
    },
    {  
      "title": "Show HN: I made an open source directory of where to showoff your projects",
      "url": "https://github.com/KingMenes/awesome-launch",
      "text": "I've done a lot of things in the past, including UX design, research work, open source development, and technical writing. It was getting tough to show my story with just one platform, which is why I created this portfolio. There are 10+ sections and I've coded it using Next.js, TypeScript, GitHub APIs (projects), Forem APIs (blogs), Framer Motion (animation), Tailwind, external packages like embla-carousel, react-modern-drawer for individual components. I've tried to show my story and personality.",
      "upvotes": 185,
      "comments": 43,
      "time_delta": "2025-01-16T13:23:17",
      "rank": 87,
      "score": 0.009030919491561644
    },
    {  
      "title": "Show HN: Play brick breaker using webcam and hand tracking (open source)",
      "url": "https://collidingscopes.github.io/manual-brick-breaker/",
      "text": "",
      "upvotes": 22,
      "comments": 6,
      "time_delta": "2025-01-17T03:56:40",
      "rank": 88,
      "score": 0.0011494146587092094
    },
    {
      "title": "Show HN: Prism – An AI-Driven Generative Art System That Evolves over Time",
      "url": "https://github.com/P-R-I-S-M-PROJECT/P.R.I.S.M",
      "text": "Hey HN, I’m excited to share PRISM, an open-source system we’ve been building that fuses multiple AI models (OpenAI, Anthropic, and FAL API) with Processing to create evolving geometric art and static images. The idea came from our fascination with how AI can generate new forms but often lacks a memory or evolutionary approach. PRISM aims to solve that by “remembering” past successes and failures and then adapting its creative approach over time + useful for automating batches and variations of specific styles of techniques with prompt adjusting. Key Features: - Multi-model AI Generation: Code and images produced by GPT-like models, Claude variants, and FAL Flux. - Evolutionary Memory: Each pattern generation is analyzed; successful techniques become more likely in future generations. - Processing Integration: Animations are rendered via Processing on Windows (with plans to expand cross-platform). - Interactive Menu System: Easy to navigate, choose models, generate single/batch patterns, or run continuous mode. - Roadmap for Growth: We plan to add a web interface, advanced pattern analysis, real-time collaboration, and more. Tech Stack & Challenges: - Python for the orchestration, hooking into each AI API (OpenAI, Anthropic, FAL). - Processing 4.0+ for rendering animations. - Evolutionary Approach: We track performance metrics (visual complexity, motion quality, aesthetic evaluation) to shape future generations. - We had to tackle issues like ensuring code output from GPT/Claude is valid Processing code, managing timeouts, and orchestrating multiple model calls in parallel. Why We Built This: We wanted to see if AI can become a “creative collaborator” instead of just a single-shot generator. By incorporating an evolving memory and multiple model personalities, we aim for more diverse and interesting results. How to Try It: 1. Clone the repo: git clone https://github.com/P-R-I-S-M-PROJECT/P.R.I.S.M.git 2. Install requirements (pip install -r requirements.txt) and set your .env with API keys. 3. Run python prism.py on Windows with Processing installed (roadmap includes broader OS support soon). Questions for HN: - Does this “multi-model + evolutionary” approach resonate with you? How might we improve it? - Any suggestions for better pattern analysis or new AI integrations? - Feedback on user experience or installation process? GitHub Link: [https://github.com/P-R-I-S-M-PROJECT/P.R.I.S.M]. Thanks for checking it out! I’ll be around to answer any questions or hear your thoughts on making this a better tool for the creative coding community.",
      "upvotes": 5,
      "comments": 3,
      "time_delta": "2025-01-24T07:20:14",
      "rank": 89,
      "score": 0.0023923600211259253
    },
    {
      "title": "Show HN: I Built a Tool that Detects If a Voice is AI-Generated. 94% Accuracy",
      "url": "https://github.com/zo9999/deepfake-audio-detector",
      "text": "Hello from San Francisco! I built this tool in 2023 that detects whether or not a voice is AI-generated. It takes an audio clip of somebody speaking as input and gives a binary classification ('human' or 'AI') as output. I tested it tonight (2025) on some ElevenLabs clips and it still works! I built it using a fairly simple Convolutional Neural Network (CNN). Essentially, we pre-process the audio to produce a Mel Spectrogram, then we use the CNN to do image classification on the spectrogram. The Jupyter notebook file that I wrote to train the model is in the 'model' dir, but if you wanna just use the tool, there's a python script in the root directory of the project. I trained the model on a Paperspace (acquired by DigitalOcean) cloud server with one GPU. Check it out! Thanks, Zuri Obozuwa.",
      "upvotes": 3,
      "comments": 0,
      "time_delta": "2025-01-24T07:09:47",
      "rank": 90,
      "score": 0.0011901316614134037
    }
  ]